{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst DevURL = 'http://localhost:3002/Admin_API/UserManagement/';\nconst StageURL = 'http://aquila-admin.pptssolutions.com/Admin_API/UserManagement/';\nconst TempURL = 'http://aquila.pptssolutions.com/Admin_API/UserManagement/';\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nexport let UserManagementService = /*#__PURE__*/(() => {\n  class UserManagementService {\n    constructor(http) {\n      this.http = http;\n      this.API_URL = environment.apiUrl + 'Admin_API/UserManagement/';\n    }\n\n    User_AsyncValidate(data) {\n      return this.http.post(this.API_URL + 'User_AsyncValidate', data, httpOptions).pipe(map(res => res), catchError(err => of(err)));\n    }\n\n    User_Create(data) {\n      return this.http.post(this.API_URL + 'Create', data, httpOptions).pipe(map(res => res), catchError(err => of(err)));\n    }\n\n    Users_List(data) {\n      return this.http.post(this.API_URL + 'List', data, httpOptions).pipe(map(res => res), catchError(err => of(err)));\n    }\n\n    Users_Delete(data) {\n      return this.http.post(this.API_URL + 'Delete', data, httpOptions).pipe(map(res => res), catchError(err => of(err)));\n    }\n\n    User_Update(data) {\n      return this.http.post(this.API_URL + 'Update', data, httpOptions).pipe(map(res => res), catchError(err => of(err)));\n    }\n\n    UserActive_Status(data) {\n      return this.http.post(this.API_URL + 'Active', data, httpOptions).pipe(map(res => res), catchError(err => of(err)));\n    }\n\n    UserInActive_Status(data) {\n      return this.http.post(this.API_URL + 'InActive', data, httpOptions).pipe(map(res => res), catchError(err => of(err)));\n    }\n\n    AllNotification_List(data) {\n      return this.http.post(this.API_URL + 'Notifications_List', data, httpOptions).pipe(map(res => res), catchError(err => of(err)));\n    }\n\n    Notification_Counts(data) {\n      return this.http.post(this.API_URL + 'Notification_Counts', data, httpOptions).pipe(map(res => res), catchError(err => of(err)));\n    }\n\n    DeleteAllRead(data) {\n      return this.http.post(this.API_URL + 'DeleteAllRead', data, httpOptions).pipe(map(res => res), catchError(err => of(err)));\n    }\n\n    MarkAllAsRead(data) {\n      return this.http.post(this.API_URL + 'MarkAllAsRead', data, httpOptions).pipe(map(res => res), catchError(err => of(err)));\n    }\n\n    Read_Notification(data) {\n      return this.http.post(this.API_URL + 'Read_Notification', data, httpOptions).pipe(map(res => res), catchError(err => of(err)));\n    }\n\n  }\n\n  UserManagementService.ɵfac = function UserManagementService_Factory(t) {\n    return new (t || UserManagementService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  UserManagementService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserManagementService,\n    factory: UserManagementService.ɵfac,\n    providedIn: 'root'\n  });\n  return UserManagementService;\n})();","map":null,"metadata":{},"sourceType":"module"}