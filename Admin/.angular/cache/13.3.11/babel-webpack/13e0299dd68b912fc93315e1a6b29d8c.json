{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport * as CryptoJS from 'crypto-js';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nconst DevURL = 'http://localhost:3002/Admin_API/UserManagement/';\nconst StageURL = 'http://aquila-admin.pptssolutions.com/Admin_API/UserManagement/';\nconst TempURL = 'http://aquila.pptssolutions.com/Admin_API/UserManagement/';\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nexport let LoginManageService = /*#__PURE__*/(() => {\n  class LoginManageService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.API_URL = environment.apiUrl + 'Admin_API/UserManagement/';\n    }\n\n    User_login(data) {\n      return this.http.post(this.API_URL + 'Login', data, httpOptions).pipe(map(res => res), catchError(err => of(err)));\n    }\n\n    If_LoggedIn() {\n      if (localStorage.getItem('Session') && localStorage.getItem('SessionKey') && localStorage.getItem('SessionVerify')) {\n        const LastSession = new Date(atob(localStorage.getItem('SessionVerify'))).getTime();\n        const NowSession = new Date().getTime();\n        const SessionDiff = NowSession - LastSession;\n        const SessionDiffHours = SessionDiff / 1000 / 60 / 60;\n\n        if (SessionDiffHours < 2) {\n          return 'Valid';\n        } else {\n          return 'Expired';\n        }\n      } else {\n        localStorage.clear();\n        return 'Invalid';\n      }\n    }\n\n    LoginUser_Info() {\n      if (localStorage.getItem('Session') && localStorage.getItem('SessionKey') && localStorage.getItem('SessionVerify')) {\n        return CryptoJS.AES.decrypt(localStorage.getItem('Session'), localStorage.getItem('SessionKey').slice(3, 10)).toString(CryptoJS.enc.Utf8);\n      } else {\n        localStorage.clear();\n        this.router.navigate(['/admin-login']);\n      }\n    }\n\n  }\n\n  LoginManageService.ɵfac = function LoginManageService_Factory(t) {\n    return new (t || LoginManageService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n\n  LoginManageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LoginManageService,\n    factory: LoginManageService.ɵfac,\n    providedIn: 'root'\n  });\n  return LoginManageService;\n})();","map":null,"metadata":{},"sourceType":"module"}