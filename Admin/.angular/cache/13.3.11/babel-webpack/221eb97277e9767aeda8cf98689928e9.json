{"ast":null,"code":"import { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { map, startWith } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/common-services/toastr.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../../../app/services/customer-management/customer-management.service\";\nimport * as i4 from \"ngx-bootstrap/modal\";\nimport * as i5 from \"src/app/services/common-services/data-passing.service\";\nimport * as i6 from \"src/app/services/common-services/business-data-passing.service\";\nimport * as i7 from \"src/app/services/common-services/user-data-passing.service\";\nimport * as i8 from \"src/app/services/branch-data-passing.service\";\nimport * as i9 from \"../../services/login-management/login-manage.service\";\nimport * as i10 from \"@angular/forms\";\nimport * as i11 from \"@angular/material/input\";\nimport * as i12 from \"@angular/material/autocomplete\";\nimport * as i13 from \"@angular/common\";\nimport * as i14 from \"@angular/material/core\";\nimport * as i15 from \"@angular/material/checkbox\";\nconst _c0 = [\"TableHeaderSection\"];\nconst _c1 = [\"TableBodySection\"];\nconst _c2 = [\"TableLoaderSection\"];\n\nfunction CustomerRecordsComponent_mat_option_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 26);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const Owner_r3 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", Owner_r3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", Owner_r3.ContactName, \" \");\n  }\n}\n\nfunction CustomerRecordsComponent_ng_container_26_mat_option_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 26);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const Users_r6 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", Users_r6);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", Users_r6.ContactName, \" \");\n  }\n}\n\nfunction CustomerRecordsComponent_ng_container_26_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 9)(2, \"div\", 10)(3, \"label\", 11);\n    i0.ɵɵtext(4, \" User Name\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"input\", 27);\n    i0.ɵɵlistener(\"blur\", function CustomerRecordsComponent_ng_container_26_Template_input_blur_5_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.AutocompleteBlur(\"User\");\n    })(\"ngModelChange\", function CustomerRecordsComponent_ng_container_26_Template_input_ngModelChange_5_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return ctx_r9.UserNameChange($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"mat-autocomplete\", 13, 28);\n    i0.ɵɵtemplate(8, CustomerRecordsComponent_ng_container_26_mat_option_8_Template, 2, 2, \"mat-option\", 15);\n    i0.ɵɵpipe(9, \"async\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(10, \"div\", 9)(11, \"div\", 29)(12, \"mat-checkbox\", 30);\n    i0.ɵɵlistener(\"ngModelChange\", function CustomerRecordsComponent_ng_container_26_Template_mat_checkbox_ngModelChange_12_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return ctx_r10.InvoiceHistory();\n    });\n    i0.ɵɵtext(13, \"Show All Invoice\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(14, \"div\", 9)(15, \"div\", 29)(16, \"mat-checkbox\", 31);\n    i0.ɵɵlistener(\"ngModelChange\", function CustomerRecordsComponent_ng_container_26_Template_mat_checkbox_ngModelChange_16_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return ctx_r11.PaymentHistory();\n    });\n    i0.ɵɵtext(17, \"Show All Payment\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const _r4 = i0.ɵɵreference(7);\n\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"matAutocomplete\", _r4);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"displayWith\", ctx_r2.UserDisplayName);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(9, 3, ctx_r2.FilterUserList));\n  }\n}\n\nexport let CustomerRecordsComponent = /*#__PURE__*/(() => {\n  class CustomerRecordsComponent {\n    constructor(Toastr, renderer, router, CustomerService, ModalService, dataPassingService, businessDataPassingService, userDataPassingService, branchDataPassingService, LoginService) {\n      this.Toastr = Toastr;\n      this.renderer = renderer;\n      this.router = router;\n      this.CustomerService = CustomerService;\n      this.ModalService = ModalService;\n      this.dataPassingService = dataPassingService;\n      this.businessDataPassingService = businessDataPassingService;\n      this.userDataPassingService = userDataPassingService;\n      this.branchDataPassingService = branchDataPassingService;\n      this.LoginService = LoginService;\n      this.subscription = new Subscription();\n      this.UserDetails = [];\n      this.StateList = [];\n      this.PageLoader = true;\n      this.CurrentIndex = 1;\n      this.SkipCount = 0;\n      this.SerialNoAddOn = 0;\n      this.LimitCount = 5;\n      this.ShowingText = 'Showing <span>0</span> to <span>0</span> out of <span>0</span> entries';\n      this.PagesArray = [];\n      this.TotalRows = 0;\n      this.LastCreation = new Date();\n      this.PagePrevious = {\n        Disabled: true,\n        value: 0,\n        Class: 'PageAction_Disabled'\n      };\n      this.PageNext = {\n        Disabled: true,\n        value: 0,\n        Class: 'PageAction_Disabled'\n      };\n      this.SubLoader = false;\n      this.GoToPage = null;\n      this.UserList = [];\n      this.isVisible = false;\n      this.CustomersList = [];\n      this.UsersList = [];\n      this.BusinessList = [];\n      this.BranchList = [];\n      this.LastSelectedOwner = null;\n      this.LastSelectedUser = null;\n      this.LastSelectedBusiness = null;\n      this.LastSelectedBranch = null; // Filter Input Validation\n\n      this.AlphaNumeric = new RegExp('^[A-Za-z0-9]+$');\n      this.AlphaNumericSpaceHyphen = new RegExp('^[A-Za-z0-9 -]+$');\n      this.Alphabets = new RegExp('^[A-Za-z]+$');\n      this.AlphabetsSpaceHyphen = new RegExp('^[A-Za-z -]+$');\n      this.AlphabetsSpaceHyphenDot = new RegExp('^[A-Za-z -.]+$');\n      this.Numerics = new RegExp('^[0-9]+$');\n      this.NumericDecimal = new RegExp('^[0-9]+([.][0-9]+)?$');\n      this.MobileNumeric = new RegExp('^[0-9 +]+$'); // tslint:disable-next-line: variable-name\n\n      this.CustomerCategory = [{\n        Name: 'Buyer',\n        Key: 'Buyer'\n      }, {\n        Name: 'Seller',\n        Key: 'Seller'\n      }];\n      this.CustomerType = [{\n        Name: 'Owner',\n        Key: 'Owner'\n      }, {\n        Name: 'User',\n        Key: 'User'\n      }];\n      this.THeaders = [{\n        Key: 'Name',\n        ShortKey: 'Name',\n        Name: 'CustomerName',\n        If_Short: false,\n        Condition: ''\n      }, {\n        Key: 'Mobile',\n        ShortKey: 'Mobile',\n        Name: 'Mobile ',\n        If_Short: false,\n        Condition: ''\n      }, {\n        Key: 'Email',\n        ShortKey: 'Email',\n        Name: 'Email',\n        If_Short: false,\n        Condition: ''\n      }, {\n        Key: 'CustomerCategory',\n        ShortKey: 'CustomerCategory',\n        Name: 'Owner Category',\n        If_Short: false,\n        Condition: ''\n      }, {\n        Key: 'TotalUser',\n        ShortKey: 'TotalUser',\n        Name: 'No.of User',\n        If_Short: false,\n        Condition: ''\n      }, {\n        Key: 'TotalBusiness',\n        ShortKey: 'TotalBusiness',\n        Name: 'No.of Business',\n        If_Short: false,\n        Condition: ''\n      }, {\n        Key: 'State',\n        ShortKey: 'StateSort',\n        Name: 'State',\n        If_Short: false,\n        Condition: ''\n      }, {\n        Key: 'createdAt',\n        ShortKey: 'createdAt',\n        Name: 'Created At',\n        If_Short: false,\n        Condition: ''\n      }];\n      this.FiltersArray = [{\n        Active: false,\n        Key: 'ContactName',\n        Value: '',\n        DisplayName: 'Customer Name',\n        DBName: 'ContactName',\n        Type: 'String',\n        Option: ''\n      }, {\n        Active: false,\n        Key: 'Mobile',\n        Value: '',\n        DisplayName: 'Mobile',\n        DBName: 'Mobile',\n        Type: 'String',\n        Option: ''\n      }, {\n        Active: false,\n        Key: 'Email',\n        Value: '',\n        DisplayName: 'Email',\n        DBName: 'Email',\n        Type: 'String',\n        Option: ''\n      }, {\n        Active: false,\n        Key: 'CustomerCategory',\n        Value: '',\n        DisplayName: 'CustomerCategory',\n        DBName: 'CustomerCategory',\n        Type: 'String',\n        Option: 'Select'\n      }, {\n        Active: false,\n        Key: 'State',\n        Value: '',\n        DisplayName: 'State Name',\n        DBName: 'State',\n        Type: 'Object',\n        Option: ''\n      }];\n      this.PinCredentials = [{\n        Active: false,\n        Key: 'ContactName',\n        Value: '',\n        DisplayName: 'Customer Name',\n        DBName: 'ContactName',\n        Type: 'String',\n        Option: ''\n      }, {\n        Active: false,\n        Key: 'Mobile',\n        Value: '',\n        DisplayName: 'Mobile',\n        DBName: 'Mobile',\n        Type: 'String',\n        Option: ''\n      }, {\n        Active: false,\n        Key: 'Email',\n        Value: '',\n        DisplayName: 'Email',\n        DBName: 'Email',\n        Type: 'String',\n        Option: ''\n      }, {\n        Active: false,\n        Key: 'CustomerCategory',\n        Value: '',\n        DisplayName: 'CustomerCategory',\n        DBName: 'CustomerCategory',\n        Type: 'String',\n        Option: 'Select'\n      }, {\n        Active: false,\n        Key: 'State_Name',\n        Value: '',\n        DisplayName: 'State Name',\n        DBName: 'State_Name',\n        Type: 'String',\n        Option: ''\n      }];\n      this.AllOwner = [];\n      this.AllUser = [];\n      this.AllBusiness = [];\n      this.AllBranch = [];\n      this.BusinessExpand = false;\n      this.enable = false;\n      this.myControl = new FormControl();\n      this.options = ['One 1', 'Two 2', 'Three 3'];\n      this.BranchDetails = [];\n      this.BranchUserDetails = [];\n      this.UserBusinessInfo = [];\n      this.UserBusinessBoolean = false;\n      this.PaymentBoolean = false;\n      this.InvoiceBoolean = false;\n      this.UserInfo = JSON.parse(this.LoginService.LoginUser_Info());\n      this.CustomerService.GetStates({\n        User: this.UserInfo._id\n      }).subscribe(response => {\n        if (response.Status && response.Status === true) {\n          this.StateList = response.Response;\n        }\n      });\n      this.CustomerService.OwnerList({\n        User: this.UserInfo._id\n      }).subscribe(response => {\n        if (response.Status && response.Status === true) {\n          this.CustomersList = response.Response;\n          setTimeout(() => {\n            this.SideFGroup.controls.Owner.setValue(null);\n            this.SideFGroup.controls.Owner.updateValueAndValidity();\n          }, 100);\n        } else {\n          this.CustomersList = [];\n        }\n      });\n      this.subscription.add(this.dataPassingService.AllOwner.subscribe(response => {\n        this.AllOwner = response;\n\n        if (this.AllOwner.length > 0) {\n          this.Owner = this.AllOwner[0]._id;\n          this.LastSelectedOwner = this.AllOwner[0]._id;\n          this.ngOnInit();\n          this.DefaultNameLoading(this.Owner, this.User, this.Business, this.Branch);\n        } else {\n          this.PaymentBoolean = false;\n          this.InvoiceBoolean = false;\n          this.router.navigate(['Customers/Owner']);\n        }\n      }));\n      this.subscription.add(this.userDataPassingService.AllUser.subscribe(response => {\n        this.AllUser = response;\n\n        if (this.AllUser.length !== 0) {\n          this.User = this.AllUser[0];\n          this.LastSelectedUser = this.AllUser[0]._id;\n          this.ngOnInit();\n          this.DefaultNameLoading(this.Owner, this.User, this.Business, this.Branch);\n        }\n      }));\n      this.subscription.add(this.businessDataPassingService.AllBusiness.subscribe(response => {\n        this.AllBusiness = response;\n\n        if (this.AllBusiness.length !== 0) {\n          this.Business = this.AllBusiness[0];\n          this.LastSelectedBusiness = this.AllBusiness[0]._id;\n          this.ngOnInit();\n          this.DefaultNameLoading(this.Owner, this.User, this.Business, this.Branch);\n        }\n      }));\n      this.subscription.add(this.branchDataPassingService.AllBranch.subscribe(response => {\n        this.AllBranch = response;\n\n        if (this.AllBranch.length !== 0) {\n          this.Branch = this.AllBranch[0];\n          this.LastSelectedBranch = this.AllBranch[0]._id;\n          this.ngOnInit();\n          this.DefaultNameLoading(this.Owner, this.User, this.Business, this.Branch);\n        }\n      }));\n    }\n\n    ngOnInit() {\n      if (this.AllOwner.length !== 0) {\n        const OwnerContactName = this.AllOwner[0];\n        const UserContactName = this.AllUser[0];\n        const BusinessName = this.AllBusiness[0];\n        const BranchName = this.AllBranch[0];\n        this.SideFGroup = new FormGroup({\n          Owner: new FormControl(OwnerContactName, Validators.required),\n          User: new FormControl(UserContactName, Validators.required),\n          Business: new FormControl(BusinessName, Validators.required),\n          Branch: new FormControl(BranchName, Validators.required),\n          Invoice: new FormControl(this.InvoiceBoolean),\n          Payment: new FormControl(this.PaymentBoolean)\n        });\n      } else {\n        this.SideFGroup = new FormGroup({\n          Owner: new FormControl('', Validators.required),\n          User: new FormControl('', Validators.required),\n          Business: new FormControl('', Validators.required),\n          Branch: new FormControl('', Validators.required),\n          Invoice: new FormControl(false),\n          Payment: new FormControl(false)\n        });\n      }\n\n      this.FilterOwnerList = this.SideFGroup.controls.Owner.valueChanges.pipe(startWith(''), map(value => {\n        if (value && value !== null && value !== '') {\n          if (typeof value === 'object') {\n            if (this.LastSelectedOwner === null || this.LastSelectedOwner !== value._id) {\n              this.LastSelectedOwner = value._id;\n            }\n\n            value = value.ContactName;\n          }\n\n          return this.CustomersList.filter(option => option.ContactName.toLowerCase().includes(value.toLowerCase()));\n        } else {\n          this.LastSelectedOwner = null;\n          return this.CustomersList;\n        }\n      }));\n      this.FilterUserList = this.SideFGroup.controls.User.valueChanges.pipe(startWith(''), map(value => {\n        if (value && value !== null && value !== '') {\n          if (typeof value === 'object') {\n            if (this.LastSelectedUser === null || this.LastSelectedUser !== value._id) {\n              this.LastSelectedUser = value._id;\n            }\n\n            value = value.ContactName;\n          }\n\n          return this.UsersList.filter(option => option.ContactName.toLowerCase().includes(value.toLowerCase()));\n        } else {\n          this.LastSelectedUser = null;\n          return this.UsersList;\n        }\n      }));\n      this.FilterBusinessList = this.SideFGroup.controls.Business.valueChanges.pipe(startWith(''), map(value => {\n        if (value && value !== null && value !== '') {\n          if (typeof value === 'object') {\n            if (this.LastSelectedBusiness === null || this.LastSelectedBusiness !== value._id) {\n              this.LastSelectedBusiness = value._id;\n            }\n\n            value = value.BusinessName;\n          }\n\n          return this.BusinessList.filter(option => option.BusinessName.toLowerCase().includes(value.toLowerCase()));\n        } else {\n          this.LastSelectedBusiness = null;\n          return this.BusinessList;\n        }\n      }));\n      this.FilterBranchList = this.SideFGroup.controls.Branch.valueChanges.pipe(startWith(''), map(value => {\n        if (value && value !== null && value !== '') {\n          if (typeof value === 'object') {\n            if (this.LastSelectedBranch === null || this.LastSelectedBranch !== value._id) {\n              this.LastSelectedBranch = value._id;\n            }\n\n            value = value.BranchName;\n          }\n\n          return this.BranchList.filter(option => option.BranchName.toLowerCase().includes(value.toLowerCase()));\n        } else {\n          this.LastSelectedBranch = null;\n          return this.BranchList;\n        }\n      }));\n    }\n\n    OwnerDisplayName(Owner) {\n      return Owner && Owner !== null && Owner !== '' ? Owner.ContactName : null;\n    }\n\n    UserDisplayName(User) {\n      return User && User !== null && User !== '' ? User.ContactName : null;\n    } // tslint:disable-next-line: no-shadowed-variable\n\n\n    BusinessDisplayName(Businesss) {\n      return Businesss && Businesss !== null && Businesss !== '' ? Businesss.FirstName + ' ' + Businesss.LastName : null;\n    } // tslint:disable-next-line: no-shadowed-variable\n\n\n    BranchDisplayName(Branchs) {\n      return Branchs && Branchs !== null && Branchs !== '' ? Branchs.BranchName : null;\n    }\n\n    OwnerNameChange(Owner) {\n      if (typeof Owner === 'object' && Owner !== null && Owner !== undefined) {\n        this.Owner = Owner._id;\n        this.AllOwner = [];\n        this.AllOwner.push(Owner);\n        const UserControlName = 'User';\n        const BusinessControlName = 'Business';\n        const BranchControlName = 'Branch';\n        this.DefaultNameLoading(this.Owner, this.User, this.Business, this.Branch);\n        this.SideFGroup.controls[UserControlName].setValue(null);\n        this.SideFGroup.controls[BranchControlName].setValue(null);\n        this.SideFGroup.controls[BusinessControlName].setValue(null);\n        this.dataPassingService.UpdateAllOwnerData(this.AllOwner);\n        this.businessDataPassingService.UpdateAllBusinessData([]);\n        this.branchDataPassingService.UpdateAllBranchData([]);\n        this.userDataPassingService.UpdateAllUserData([]);\n\n        if (this.PaymentBoolean === true && this.InvoiceBoolean === false) {\n          this.router.navigate(['Customers/Payment']);\n        } else if (this.PaymentBoolean === false && this.InvoiceBoolean === true) {\n          this.router.navigate(['Customers/Invoice']);\n        } else {\n          this.router.navigate(['Customers/User']);\n        }\n      } else if (this.LastSelectedOwner === null && Owner === null) {\n        this.Owner = undefined;\n        this.User = undefined;\n        this.Business = undefined;\n        this.Branch = undefined;\n        this.AllOwner = [];\n        this.AllUser = [];\n        this.AllBusiness = [];\n        this.AllBranch = [];\n        this.dataPassingService.UpdateAllOwnerData([]);\n        this.businessDataPassingService.UpdateAllBusinessData([]);\n        this.branchDataPassingService.UpdateAllBranchData([]);\n        this.userDataPassingService.UpdateAllUserData([]);\n        this.router.navigate(['/Customers/Owner']);\n      }\n    }\n\n    UserNameChange(User) {\n      if (typeof User === 'object' && User !== null && User !== undefined) {\n        this.AllUser = [];\n        this.AllUser.push(User);\n        this.User = User;\n        const BusinessControlName = 'Business';\n        const BranchControlName = 'Branch';\n        this.DefaultNameLoading(this.Owner, this.User, this.Business, this.Branch);\n        this.SideFGroup.controls[BranchControlName].setValue(null);\n        this.SideFGroup.controls[BusinessControlName].setValue(null);\n        this.dataPassingService.UpdateAllOwnerData(this.AllOwner);\n        this.userDataPassingService.UpdateAllUserData(this.AllUser);\n        this.businessDataPassingService.UpdateAllBusinessData([]);\n        this.branchDataPassingService.UpdateAllBranchData([]);\n\n        if (this.PaymentBoolean === true && this.InvoiceBoolean === false) {\n          this.router.navigate(['Customers/Payment']);\n        } else if (this.PaymentBoolean === false && this.InvoiceBoolean === true) {\n          this.router.navigate(['Customers/Invoice']);\n        } else {\n          this.router.navigate(['Customers/Business']);\n        }\n      } else if (this.LastSelectedUser === null && User === null) {\n        this.User = undefined;\n        this.Business = undefined;\n        this.Branch = undefined;\n        this.AllUser = [];\n        this.userDataPassingService.UpdateAllUserData([]);\n        this.AllBusiness = [];\n        this.AllBranch = [];\n        this.dataPassingService.UpdateAllOwnerData(this.AllOwner);\n        this.businessDataPassingService.UpdateAllBusinessData([]);\n        this.branchDataPassingService.UpdateAllBranchData([]);\n\n        if (this.PaymentBoolean === true && this.InvoiceBoolean === false) {\n          this.router.navigate(['Customers/Payment']);\n        } else if (this.PaymentBoolean === false && this.InvoiceBoolean === true) {\n          this.router.navigate(['Customers/Invoice']);\n        } else {\n          this.router.navigate(['Customers/Owner']);\n        }\n      }\n    }\n\n    BusinessNameChange(Business) {\n      if (typeof Business === 'object' && Business !== null && Business !== undefined) {\n        this.Business = Business;\n        this.DefaultNameLoading(this.Owner, this.User, this.Business, this.Branch);\n        this.AllBusiness = [];\n        this.AllBusiness.push(Business);\n        const BranchControlName = 'Branch';\n        this.SideFGroup.controls[BranchControlName].setValue(null);\n\n        if (this.AllUser.length === 0) {\n          this.userDataPassingService.UpdateAllUserData([]);\n        } else {\n          this.userDataPassingService.UpdateAllUserData(this.AllUser);\n        }\n\n        this.AllBranch = [];\n        this.dataPassingService.UpdateAllOwnerData(this.AllOwner);\n        this.businessDataPassingService.UpdateAllBusinessData(this.AllBusiness);\n        this.branchDataPassingService.UpdateAllBranchData([]);\n\n        if (this.AllUser.length === 0) {\n          if (this.PaymentBoolean === true && this.InvoiceBoolean === false) {\n            this.router.navigate(['Customers/Payment']);\n          } else if (this.PaymentBoolean === false && this.InvoiceBoolean === true) {\n            this.router.navigate(['Customers/Invoice']);\n          } else {\n            this.router.navigate(['Customers/Business']);\n          }\n        } else {\n          if (this.PaymentBoolean === true && this.InvoiceBoolean === false) {\n            this.router.navigate(['Customers/Payment']);\n          } else if (this.PaymentBoolean === false && this.InvoiceBoolean === true) {\n            this.router.navigate(['Customers/Invoice']);\n          } else {\n            this.router.navigate(['Customers/Branch']);\n          }\n        }\n      } else if (this.LastSelectedBusiness === null && Business === null) {\n        this.Business = undefined;\n        this.Branch = undefined;\n\n        if (this.AllUser.length === 0) {\n          this.AllUser = [];\n        }\n\n        this.AllBusiness = [];\n        this.AllBranch = [];\n        this.userDataPassingService.UpdateAllUserData(this.AllUser);\n        this.dataPassingService.UpdateAllOwnerData(this.AllOwner);\n        this.businessDataPassingService.UpdateAllBusinessData([]);\n        this.branchDataPassingService.UpdateAllBranchData([]);\n\n        if (this.AllUser.length > 0) {\n          if (this.PaymentBoolean === true && this.InvoiceBoolean === false) {\n            this.router.navigate(['Customers/Payment']);\n          } else if (this.PaymentBoolean === false && this.InvoiceBoolean === true) {\n            this.router.navigate(['Customers/Invoice']);\n          } else {\n            this.router.navigate(['Customers/User']);\n          }\n        } else {\n          if (this.PaymentBoolean === true && this.InvoiceBoolean === false) {\n            this.router.navigate(['Customers/Payment']);\n          } else if (this.PaymentBoolean === false && this.InvoiceBoolean === true) {\n            this.router.navigate(['Customers/Invoice']);\n          } else {\n            this.router.navigate(['Customers/Owner']);\n          }\n        }\n      }\n    }\n\n    BranchNameChange(Branch) {\n      if (typeof Branch === 'object' && Branch !== null && Branch !== undefined) {\n        this.Branch = Branch;\n        this.AllBranch = [];\n        this.AllBranch.push(Branch);\n\n        if (this.AllUser.length === 0) {\n          this.userDataPassingService.UpdateAllUserData([]);\n        } else {\n          this.userDataPassingService.UpdateAllUserData(this.AllUser);\n        }\n\n        if (this.AllBusiness.length === 0) {\n          this.businessDataPassingService.UpdateAllBusinessData([]);\n        } else {\n          this.businessDataPassingService.UpdateAllBusinessData(this.AllBusiness);\n        }\n\n        this.dataPassingService.UpdateAllOwnerData(this.AllOwner);\n        this.branchDataPassingService.UpdateAllBranchData(this.AllBranch);\n\n        if (this.PaymentBoolean === true && this.InvoiceBoolean === false) {\n          this.router.navigate(['Customers/Payment']);\n        } else if (this.PaymentBoolean === false && this.InvoiceBoolean === true) {\n          this.router.navigate(['Customers/Invoice']);\n        } else {\n          this.router.navigate(['Customers/Branch']);\n        }\n      } else if (this.LastSelectedBranch === null && Branch === null) {\n        this.Branch = undefined;\n\n        if (this.AllUser.length === 0) {\n          this.userDataPassingService.UpdateAllUserData([]);\n        } else {\n          this.userDataPassingService.UpdateAllUserData(this.AllUser);\n        }\n\n        if (this.AllBusiness.length === 0) {\n          this.businessDataPassingService.UpdateAllBusinessData([]);\n        } else {\n          this.businessDataPassingService.UpdateAllBusinessData(this.AllBusiness);\n        }\n\n        this.AllBranch = [];\n        this.dataPassingService.UpdateAllOwnerData(this.AllOwner);\n        this.branchDataPassingService.UpdateAllBranchData(this.AllBranch);\n\n        if (this.AllUser.length > 0 && this.AllBusiness.length > 0) {\n          if (this.PaymentBoolean === true && this.InvoiceBoolean === false) {\n            this.router.navigate(['Customers/Payment']);\n          } else if (this.PaymentBoolean === false && this.InvoiceBoolean === true) {\n            this.router.navigate(['Customers/Invoice']);\n          } else {\n            this.router.navigate(['Customers/Business']);\n          }\n        } else if (this.AllUser.length > 0 && this.AllBusiness.length === 0) {\n          if (this.PaymentBoolean === true && this.InvoiceBoolean === false) {\n            this.router.navigate(['Customers/Payment']);\n          } else if (this.PaymentBoolean === false && this.InvoiceBoolean === true) {\n            this.router.navigate(['Customers/Invoice']);\n          } else {\n            this.router.navigate(['Customers/User']);\n          }\n        } else if (this.AllUser.length === 0 && this.AllBusiness.length > 0) {\n          if (this.PaymentBoolean === true && this.InvoiceBoolean === false) {\n            this.router.navigate(['Customers/Payment']);\n          } else if (this.PaymentBoolean === false && this.InvoiceBoolean === true) {\n            this.router.navigate(['Customers/Invoice']);\n          } else {\n            this.router.navigate(['Customers/Business']);\n          }\n        } else {\n          if (this.PaymentBoolean === true && this.InvoiceBoolean === false) {\n            this.router.navigate(['Customers/Payment']);\n          } else if (this.PaymentBoolean === false && this.InvoiceBoolean === true) {\n            this.router.navigate(['Customers/Invoice']);\n          } else {\n            this.router.navigate(['Customers/Owner']);\n          }\n        }\n      }\n    }\n\n    PaymentHistory() {\n      const PaymentControlName = 'Payment';\n\n      if (this.PaymentBoolean === false) {\n        this.PaymentBoolean = true;\n        this.InvoiceBoolean = false;\n      } else {\n        this.PaymentBoolean = false;\n        this.InvoiceBoolean = false;\n      }\n\n      if (this.SideFGroup.controls[PaymentControlName].value === true) {\n        this.dataPassingService.UpdateAllOwnerData(this.AllOwner);\n        this.userDataPassingService.UpdateAllUserData(this.AllUser);\n        this.businessDataPassingService.UpdateAllBusinessData(this.AllBusiness);\n        this.branchDataPassingService.UpdateAllBranchData(this.AllBranch);\n        this.router.navigate(['Customers/Payment']);\n      } else if (this.SideFGroup.controls[PaymentControlName].value === false) {\n        if (this.AllOwner.length !== 0 && this.AllUser.length === 0 && this.AllBusiness.length === 0 && this.AllBranch.length === 0) {\n          this.AllUser = [];\n          this.AllBusiness = [];\n          this.AllBranch = [];\n          this.dataPassingService.UpdateAllOwnerData(this.AllOwner);\n          this.userDataPassingService.UpdateAllUserData(this.AllUser);\n          this.businessDataPassingService.UpdateAllBusinessData(this.AllBusiness);\n          this.branchDataPassingService.UpdateAllBranchData(this.AllBranch);\n          this.router.navigate(['Customers/User']);\n        } else if (this.AllOwner.length !== 0 && this.AllUser.length !== 0 && this.AllBusiness.length === 0 && this.AllBranch.length === 0) {\n          this.AllBranch = [];\n          this.AllBusiness = [];\n          this.dataPassingService.UpdateAllOwnerData(this.AllOwner);\n          this.userDataPassingService.UpdateAllUserData(this.AllUser);\n          this.businessDataPassingService.UpdateAllBusinessData(this.AllBusiness);\n          this.branchDataPassingService.UpdateAllBranchData(this.AllBranch);\n          this.router.navigate(['Customers/Business']);\n        } else if (this.AllOwner.length !== 0 && this.AllUser.length === 0 && this.AllBusiness.length !== 0 && this.AllBranch.length === 0) {\n          this.AllBranch = [];\n          this.AllUser = [];\n          this.dataPassingService.UpdateAllOwnerData(this.AllOwner);\n          this.userDataPassingService.UpdateAllUserData(this.AllUser);\n          this.businessDataPassingService.UpdateAllBusinessData(this.AllBusiness);\n          this.branchDataPassingService.UpdateAllBranchData(this.AllBranch);\n          this.router.navigate(['Customers/Business']);\n        } else if (this.AllOwner.length !== 0 && this.AllUser.length !== 0 && this.AllBusiness.length !== 0 && this.AllBranch.length === 0) {\n          this.AllBranch = [];\n          this.dataPassingService.UpdateAllOwnerData(this.AllOwner);\n          this.userDataPassingService.UpdateAllUserData(this.AllUser);\n          this.businessDataPassingService.UpdateAllBusinessData(this.AllBusiness);\n          this.branchDataPassingService.UpdateAllBranchData(this.AllBranch);\n          this.router.navigate(['Customers/Branch']);\n        } else if (this.AllOwner.length !== 0 && this.AllUser.length === 0 && this.AllBusiness.length === 0 && this.AllBranch.length !== 0) {\n          this.AllBusiness = [];\n          this.AllUser = [];\n          this.dataPassingService.UpdateAllOwnerData(this.AllOwner);\n          this.userDataPassingService.UpdateAllUserData(this.AllUser);\n          this.businessDataPassingService.UpdateAllBusinessData(this.AllBusiness);\n          this.branchDataPassingService.UpdateAllBranchData(this.AllBranch);\n          this.router.navigate(['Customers/Branch']);\n        } else if (this.AllOwner.length !== 0 && this.AllUser.length === 0 && this.AllBusiness.length !== 0 && this.AllBranch.length !== 0) {\n          this.AllUser = [];\n          this.dataPassingService.UpdateAllOwnerData(this.AllOwner);\n          this.userDataPassingService.UpdateAllUserData(this.AllUser);\n          this.businessDataPassingService.UpdateAllBusinessData(this.AllBusiness);\n          this.branchDataPassingService.UpdateAllBranchData(this.AllBranch);\n          this.router.navigate(['Customers/Branch']);\n        } else if (this.AllOwner.length !== 0 && this.AllUser.length !== 0 && this.AllBusiness.length !== 0 && this.AllBranch.length !== 0) {\n          this.dataPassingService.UpdateAllOwnerData(this.AllOwner);\n          this.userDataPassingService.UpdateAllUserData(this.AllUser);\n          this.businessDataPassingService.UpdateAllBusinessData(this.AllBusiness);\n          this.branchDataPassingService.UpdateAllBranchData(this.AllBranch);\n          this.router.navigate(['Customers/Branch']);\n        }\n      }\n    }\n\n    InvoiceHistory() {\n      const InvoiceControlName = 'Invoice';\n\n      if (this.InvoiceBoolean === false) {\n        this.InvoiceBoolean = true;\n        this.PaymentBoolean = false;\n      } else {\n        this.InvoiceBoolean = false;\n        this.PaymentBoolean = false;\n      }\n\n      if (this.SideFGroup.controls[InvoiceControlName].value === true) {\n        this.dataPassingService.UpdateAllOwnerData(this.AllOwner);\n        this.userDataPassingService.UpdateAllUserData(this.AllUser);\n        this.businessDataPassingService.UpdateAllBusinessData(this.AllBusiness);\n        this.branchDataPassingService.UpdateAllBranchData(this.AllBranch);\n        this.router.navigate(['Customers/Invoice']);\n      } else if (this.SideFGroup.controls[InvoiceControlName].value === false) {\n        if (this.AllOwner.length !== 0 && this.AllUser.length === 0 && this.AllBusiness.length === 0 && this.AllBranch.length === 0) {\n          this.AllUser = [];\n          this.AllBusiness = [];\n          this.AllBranch = [];\n          this.dataPassingService.UpdateAllOwnerData(this.AllOwner);\n          this.userDataPassingService.UpdateAllUserData(this.AllUser);\n          this.businessDataPassingService.UpdateAllBusinessData(this.AllBusiness);\n          this.branchDataPassingService.UpdateAllBranchData(this.AllBranch);\n          this.router.navigate(['Customers/User']);\n        } else if (this.AllOwner.length !== 0 && this.AllUser.length !== 0 && this.AllBusiness.length === 0 && this.AllBranch.length === 0) {\n          this.AllBranch = [];\n          this.AllBusiness = [];\n          this.dataPassingService.UpdateAllOwnerData(this.AllOwner);\n          this.userDataPassingService.UpdateAllUserData(this.AllUser);\n          this.businessDataPassingService.UpdateAllBusinessData(this.AllBusiness);\n          this.branchDataPassingService.UpdateAllBranchData(this.AllBranch);\n          this.router.navigate(['Customers/Business']);\n        } else if (this.AllOwner.length !== 0 && this.AllUser.length === 0 && this.AllBusiness.length !== 0 && this.AllBranch.length === 0) {\n          this.AllBranch = [];\n          this.AllUser = [];\n          this.dataPassingService.UpdateAllOwnerData(this.AllOwner);\n          this.userDataPassingService.UpdateAllUserData(this.AllUser);\n          this.businessDataPassingService.UpdateAllBusinessData(this.AllBusiness);\n          this.branchDataPassingService.UpdateAllBranchData(this.AllBranch);\n          this.router.navigate(['Customers/Business']);\n        } else if (this.AllOwner.length !== 0 && this.AllUser.length !== 0 && this.AllBusiness.length !== 0 && this.AllBranch.length === 0) {\n          this.AllBranch = [];\n          this.dataPassingService.UpdateAllOwnerData(this.AllOwner);\n          this.userDataPassingService.UpdateAllUserData(this.AllUser);\n          this.businessDataPassingService.UpdateAllBusinessData(this.AllBusiness);\n          this.branchDataPassingService.UpdateAllBranchData(this.AllBranch);\n          this.router.navigate(['Customers/Branch']);\n        } else if (this.AllOwner.length !== 0 && this.AllUser.length === 0 && this.AllBusiness.length === 0 && this.AllBranch.length !== 0) {\n          this.AllBusiness = [];\n          this.AllUser = [];\n          this.dataPassingService.UpdateAllOwnerData(this.AllOwner);\n          this.userDataPassingService.UpdateAllUserData(this.AllUser);\n          this.businessDataPassingService.UpdateAllBusinessData(this.AllBusiness);\n          this.branchDataPassingService.UpdateAllBranchData(this.AllBranch);\n          this.router.navigate(['Customers/Branch']);\n        } else if (this.AllOwner.length !== 0 && this.AllUser.length === 0 && this.AllBusiness.length !== 0 && this.AllBranch.length !== 0) {\n          this.AllUser = [];\n          this.dataPassingService.UpdateAllOwnerData(this.AllOwner);\n          this.userDataPassingService.UpdateAllUserData(this.AllUser);\n          this.businessDataPassingService.UpdateAllBusinessData(this.AllBusiness);\n          this.branchDataPassingService.UpdateAllBranchData(this.AllBranch);\n          this.router.navigate(['Customers/Branch']);\n        } else if (this.AllOwner.length !== 0 && this.AllUser.length !== 0 && this.AllBusiness.length !== 0 && this.AllBranch.length !== 0) {\n          this.dataPassingService.UpdateAllOwnerData(this.AllOwner);\n          this.userDataPassingService.UpdateAllUserData(this.AllUser);\n          this.businessDataPassingService.UpdateAllBusinessData(this.AllBusiness);\n          this.branchDataPassingService.UpdateAllBranchData(this.AllBranch);\n          this.router.navigate(['Customers/Branch']);\n        }\n      }\n    }\n\n    DefaultNameLoading(OwnerValue, UserValue, BusinessValue, BranchValue) {\n      this.CustomerService.UserList({\n        Owner: OwnerValue\n      }).subscribe(response1 => {\n        if (response1.Status && response1.Status === true) {\n          this.UsersList = response1.Response;\n          setTimeout(() => {\n            this.SideFGroup.controls.User.updateValueAndValidity();\n          }, 100);\n        } else {\n          this.UserList = [];\n        }\n      });\n      this.CustomerService.BusinessList({\n        Owner: OwnerValue,\n        User: UserValue\n      }).subscribe(response1 => {\n        if (response1.Status && response1.Status === true) {\n          this.BusinessList = response1.Response;\n          setTimeout(() => {\n            this.SideFGroup.controls.Business.updateValueAndValidity();\n          }, 1000);\n        } else {\n          this.BusinessList = [];\n        }\n      }); // this.CustomerService.BranchList({ Owner: OwnerValue, User: UserValue, Business: BusinessValue }).subscribe(response1 => {\n      //   if (response1.Status && response1.Status === true) {\n      //     this.BranchList = response1.Response;\n      //     setTimeout(() => {\n      //       this.SideFGroup.controls.Branch.updateValueAndValidity();\n      //     }, 100);\n      //   } else {\n      //     this.BranchList = [];\n      //   }\n      // });\n    }\n\n    AutocompleteBlur(key) {\n      setTimeout(() => {\n        const value = this.SideFGroup.controls[key].value;\n\n        if (!value || value === null || value === '' || typeof value !== 'object') {\n          this.SideFGroup.controls[key].setValue(null);\n        }\n      }, 500);\n    }\n\n    Success() {\n      this.Toastr.NewToastrMessage({\n        Type: 'Success',\n        Message: 'Success Message! Everything is working Good'\n      });\n    }\n\n    Info() {\n      this.Toastr.NewToastrMessage({\n        Type: 'Info',\n        Message: 'Info Message! This is just for Information'\n      });\n    }\n\n    Warning() {\n      this.Toastr.NewToastrMessage({\n        Type: 'Warning',\n        Message: 'Warning Message! Don`t do this again'\n      });\n    }\n\n    Error() {\n      this.Toastr.NewToastrMessage({\n        Type: 'Error',\n        Message: 'Error Message! Some error occured'\n      });\n    }\n\n  }\n\n  CustomerRecordsComponent.ɵfac = function CustomerRecordsComponent_Factory(t) {\n    return new (t || CustomerRecordsComponent)(i0.ɵɵdirectiveInject(i1.ToastrService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.CustomerManagementService), i0.ɵɵdirectiveInject(i4.BsModalService), i0.ɵɵdirectiveInject(i5.DataPassingService), i0.ɵɵdirectiveInject(i6.BusinessDataPassingService), i0.ɵɵdirectiveInject(i7.UserDataPassingService), i0.ɵɵdirectiveInject(i8.BranchDataPassingService), i0.ɵɵdirectiveInject(i9.LoginManageService));\n  };\n\n  CustomerRecordsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CustomerRecordsComponent,\n    selectors: [[\"app-customer-records\"]],\n    viewQuery: function CustomerRecordsComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(_c1, 5);\n        i0.ɵɵviewQuery(_c2, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.TableHeaderSection = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.TableBodySection = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.TableLoaderSection = _t.first);\n      }\n    },\n    decls: 42,\n    vars: 7,\n    consts: [[1, \"limiter\", 2, \"display\", \"block\"], [\"xmlns\", \"http://www.w3.org/2000/svg\", \"id\", \"Layer_1\", \"data-name\", \"Layer 1\", \"viewBox\", \"0 0 990.63 1151.42\", 1, \"bk-waves-gray\"], [\"d\", \"M990.63,0V1151.42L922.26,999.76C891.54,931.63,872.07,841.21,866,738.27c-5.92-99.5.79-205.82,19.41-307.47,5.38-29.4,2.61-50.9-8.24-63.91-17.14-20.57-61.47-33.35-115.67-33.35-12.72,0-21.32.76-22.49.87l-3.63.41h-3.24c-5.5.07-11.09.1-16.6.1h-.08c-112.1,0-217.5-14.74-313.29-43.83C324.29,267.45,252.6,234.35,189,192.7,79.66,121.05,31.25,48.59,26.08,40.57L0,0Z\", 1, \"cls-1\"], [\"d\", \"M990.63,0V968.93c-55.15-122.33-67.18-329.76-31.5-524.63,39-213-228-184.49-228-184.49-471,6-642-259.81-642-259.81Z\", 1, \"cls-2\"], [1, \"content-wrapper\"], [1, \"row\"], [1, \"col-md-12\", \"mb-20\"], [1, \"box\"], [1, \"example-form\", 3, \"formGroup\"], [1, \"col-md-2\"], [1, \"form-group\"], [\"for\", \"\"], [\"matInput\", \"\", \"placeholder\", \"Owner Name\", \"autocomplete\", \"off\", \"formControlName\", \"Owner\", 3, \"matAutocomplete\", \"blur\", \"ngModelChange\"], [3, \"displayWith\"], [\"OwnerAutocomplete\", \"matAutocomplete\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [4, \"ngIf\"], [\"xmlns\", \"http://www.w3.org/2000/svg\", \"id\", \"Layer_1\", \"data-name\", \"Layer 1\", \"viewBox\", \"0 0 1920 80.97\", 1, \"bk-waves-yellow\"], [\"d\", \"M0,26.27q8.58-1.56,17-3-8.43,1.9-17,4Z\", 1, \"cls-1\"], [\"d\", \"M1920,26.27V81H0V26.27q13-2.36,25.59-4.39C211.19,59,361.59,64.1,465.42,61.8c36.44-.81,68.89-2.57,98.36-4.92C731,43.52,802.22,10.9,960,23.16c17.07,1.32,35.15,3.17,54.48,5.63,119.59,15.21,185.88,40.8,321,30,7.32-.59,14.21-1.23,20.71-1.92,101.7-10.79,110-33.76,237.32-46.09C1631.11,7.15,1745.7-2,1894.41,21.88Q1907,23.92,1920,26.27Z\", 1, \"cls-2\"], [\"d\", \"M1920,16.61V81H0V26.27q13-2.36,25.59-4.39C174.3-2,288.89,7.15,326.46,10.79c127.33,12.33,135.62,35.3,237.32,46.09,6.5.69,13.39,1.33,20.71,1.92,135.15,10.79,201.44-14.8,321-30,19.33-2.46,37.41-4.31,54.48-5.63,157.78-12.26,229,20.36,396.22,33.72,29.47,2.35,61.92,4.11,98.36,4.92,103.83,2.3,254.23-2.79,439.83-39.92Q1907.1,19.35,1920,16.61Z\", 1, \"cls-1\"], [\"d\", \"M905.52,28.79c18.66-2.37,36.16-4.18,52.7-5.49-16.54,1.76-34,4.19-52.7,7.39-119.59,20.49-185.88,55-321,40.42-7.32-.79-14.21-1.66-20.71-2.58C490.87,58.11,466,39.26,410.79,23.3c55.18,11.85,80.08,25.84,153,33.58,6.5.69,13.39,1.33,20.71,1.92C719.64,69.59,785.93,44,905.52,28.79Z\", 1, \"cls-3\"], [\"d\", \"M1887.31,23.29C1705,71.56,1557.08,78.21,1454.58,75.15c-36.44-1.09-68.89-3.46-98.36-6.62-112.67-12.13-181.75-36-263.08-45.27,81.33,6.88,150.41,24.62,263.08,33.62,29.47,2.35,61.92,4.11,98.36,4.92C1557.08,64.07,1705,59.14,1887.31,23.29Z\", 1, \"cls-3\"], [\"d\", \"M326.46,6.45C362.5,11.15,389,17,410.79,23.3c-21.78-4.68-48.29-9-84.33-12.51C288.89,7.15,174.3-2,25.59,21.88q-4.28.69-8.58,1.42c2.87-.66,5.73-1.29,8.58-1.91C174.3-10.79,288.89,1.55,326.46,6.45Z\", 1, \"cls-2\"], [\"d\", \"M1093.14,23.26c-39.39-3.32-81.66-4.1-133.14-.1l-1.78.14,1.78-.19C1011.48,17.72,1053.75,18.77,1093.14,23.26Z\", 1, \"cls-1\"], [\"d\", \"M1920,14.29v2.32q-12.9,2.75-25.59,5.27l-7.1,1.41,7.1-1.9Q1907.1,18,1920,14.29Z\", 1, \"cls-1\"], [3, \"value\"], [\"matInput\", \"\", \"formControlName\", \"User\", \"placeholder\", \"User Name\", 3, \"matAutocomplete\", \"blur\", \"ngModelChange\"], [\"UserAutocomplete\", \"matAutocomplete\"], [2, \"margin-top\", \"30px\"], [\"formControlName\", \"Invoice\", 3, \"ngModelChange\"], [\"formControlName\", \"Payment\", 3, \"ngModelChange\"]],\n    template: function CustomerRecordsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵnamespaceSVG();\n        i0.ɵɵelementStart(1, \"svg\", 1)(2, \"defs\")(3, \"style\");\n        i0.ɵɵtext(4, \" .cls-1 { fill: #e8e8e8; opacity: 0.35; } .cls-2 { fill: #efefef; } \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(5, \"title\");\n        i0.ɵɵtext(6, \"web bg images\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(7, \"path\", 2)(8, \"path\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵnamespaceHTML();\n        i0.ɵɵelementStart(9, \"div\", 4)(10, \"div\", 5)(11, \"div\", 6)(12, \"div\", 7)(13, \"h2\");\n        i0.ɵɵtext(14, \"Advance Filter\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"form\", 8)(16, \"div\", 5)(17, \"div\", 9)(18, \"div\", 10)(19, \"label\", 11);\n        i0.ɵɵtext(20, \" Owner Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"input\", 12);\n        i0.ɵɵlistener(\"blur\", function CustomerRecordsComponent_Template_input_blur_21_listener() {\n          return ctx.AutocompleteBlur(\"Owner\");\n        })(\"ngModelChange\", function CustomerRecordsComponent_Template_input_ngModelChange_21_listener($event) {\n          return ctx.OwnerNameChange($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(22, \"mat-autocomplete\", 13, 14);\n        i0.ɵɵtemplate(24, CustomerRecordsComponent_mat_option_24_Template, 2, 2, \"mat-option\", 15);\n        i0.ɵɵpipe(25, \"async\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵtemplate(26, CustomerRecordsComponent_ng_container_26_Template, 18, 5, \"ng-container\", 16);\n        i0.ɵɵelementEnd()()()()()();\n        i0.ɵɵelement(27, \"router-outlet\");\n        i0.ɵɵnamespaceSVG();\n        i0.ɵɵelementStart(28, \"svg\", 17)(29, \"defs\")(30, \"style\");\n        i0.ɵɵtext(31, \" .cls-1 { fill: #f2940c; } .cls-2 { fill: #efaa0f; } .cls-3 { fill: #e58910; } \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(32, \"title\");\n        i0.ɵɵtext(33, \"web bg images\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(34, \"path\", 18)(35, \"path\", 19)(36, \"path\", 20)(37, \"path\", 21)(38, \"path\", 22)(39, \"path\", 23)(40, \"path\", 24)(41, \"path\", 25);\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        const _r0 = i0.ɵɵreference(23);\n\n        i0.ɵɵadvance(15);\n        i0.ɵɵproperty(\"formGroup\", ctx.SideFGroup);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"matAutocomplete\", _r0);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"displayWith\", ctx.OwnerDisplayName);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(25, 5, ctx.FilterOwnerList));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.SideFGroup.controls[\"Owner\"].status === \"VALID\");\n      }\n    },\n    directives: [i10.ɵNgNoValidate, i10.NgControlStatusGroup, i10.FormGroupDirective, i11.MatInput, i10.DefaultValueAccessor, i12.MatAutocompleteTrigger, i10.NgControlStatus, i10.FormControlName, i12.MatAutocomplete, i13.NgForOf, i14.MatOption, i13.NgIf, i15.MatCheckbox, i2.RouterOutlet],\n    pipes: [i13.AsyncPipe],\n    styles: [\".mat-toggle.active[_ngcontent-%COMP%], .mat-toggle[_ngcontent-%COMP%]   [_ngcontent-%COMP%]:hover{background:#f2940c;color:#fff!important;font-weight:600;border-color:#fff}.box[_ngcontent-%COMP%]{padding:10px 10px 20px;box-shadow:0 0 5px #9e9e9e;border-radius:10px}.tbl-customer[_ngcontent-%COMP%]   thead[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]{color:#fff;background:rgba(49,58,102,1);white-space:nowrap;border:1px solid #f2940c;border-top:0;border-bottom:0}.tbl-customer[_ngcontent-%COMP%]   .column-title[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]:last-child   i[_ngcontent-%COMP%]{color:#f2940c}.tbl-customer[_ngcontent-%COMP%]   thead[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%]:first-child, .tbl-customer[_ngcontent-%COMP%]   tbody[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]:first-child{border-left:0!important}.tbl-client-container[_ngcontent-%COMP%]{padding:0 15px;box-shadow:0 0 5px #9e9e9e;background:rgba(255,255,255,.8);border-radius:20px}.table-head-title.no-default-design[_ngcontent-%COMP%]{border:0;background:transparent!important;margin:0;transform:none;position:relative}.table-head-title.no-default-design[_ngcontent-%COMP%]   h4[_ngcontent-%COMP%]{color:#313a66;transform:none;font-style:normal}.table-head-title.no-default-design[_ngcontent-%COMP%]:after{content:\\\"\\\";bottom:0;width:30%;display:block;border:1px solid #f1940e;position:absolute;left:0;right:0;margin:auto}@media only screen and (min-width: 992px){.customer-mgmt-container[_ngcontent-%COMP%]{padding:0}}\"]\n  });\n  return CustomerRecordsComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}