{"ast":null,"code":"import { ModalSessionExpiredComponent } from '../components/Modals/modal-session-expired/modal-session-expired.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"./../services/login-management/login-manage.service\";\nimport * as i3 from \"ngx-bootstrap/modal\";\nexport let NotAuthGuard = /*#__PURE__*/(() => {\n  class NotAuthGuard {\n    constructor(router, LoginService, ModalService) {\n      this.router = router;\n      this.LoginService = LoginService;\n      this.ModalService = ModalService;\n    }\n\n    canActivate() {\n      // if (localStorage.getItem('User') !== null) {\n      //    this.router.navigate(['/Industry']);\n      //    return false;\n      // } else {\n      //    localStorage.clear();\n      //    return true;\n      // }\n      if (this.LoginService.If_LoggedIn() === 'Invalid') {\n        return true;\n      } else if (this.LoginService.If_LoggedIn() === 'Expired') {\n        return new Promise(resolve => {\n          const initialState = {};\n          this.modalReference = this.ModalService.show(ModalSessionExpiredComponent, Object.assign({\n            initialState\n          }, {\n            ignoreBackdropClick: true,\n            class: 'modal-dialog-centered animated bounceInRight'\n          }));\n          this.modalReference.content.onClose.subscribe(response => {\n            if (response.Status) {\n              const UserInfo = this.LoginService.LoginUser_Info();\n\n              if (UserInfo.User_Role === 'Super_Admin') {\n                this.router.navigate(['/Industry']);\n              } else {\n                this.router.navigate(['/Industry']);\n              }\n\n              resolve(false);\n            } else {\n              resolve(true);\n            }\n          });\n        });\n      } else {\n        const UserInfo = this.LoginService.LoginUser_Info();\n\n        if (UserInfo.User_Role === 'Super_Admin') {\n          this.router.navigate(['/Industry']);\n        } else {\n          this.router.navigate(['/Industry']);\n        }\n\n        return false;\n      }\n    }\n\n  }\n\n  NotAuthGuard.ɵfac = function NotAuthGuard_Factory(t) {\n    return new (t || NotAuthGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.LoginManageService), i0.ɵɵinject(i3.BsModalService));\n  };\n\n  NotAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NotAuthGuard,\n    factory: NotAuthGuard.ɵfac,\n    providedIn: 'root'\n  });\n  return NotAuthGuard;\n})();","map":null,"metadata":{},"sourceType":"module"}